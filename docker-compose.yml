version: "3"

services:
  db:
    container_name: mysqldb
    image: mysql:latest
    env_file :
      - ./backend/devenvs/mysqldb.env
    volumes:
     - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    networks:
      - doh      

  backend:
    container_name: backend
    build: ./backend
    restart: always
    command: >
      bash -c "python3 manage.py makemigrations images &&
               python3 manage.py makemigrations styles && 
               python3 manage.py migrate &&
               python3 manage.py runserver 0.0.0.0:8080"
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
      - doh

  ai:
    container_name: ai
    build: ./ai
    command: >
      bash -c "python3 manage.py makemigrations &&
               python3 manage.py migrate &&
               python3 manage.py runserver 0.0.0.0:8081"
    ports:
      - "8081:8081"
    volumes:
      - ./ai:/ai
    depends_on:
      - backend
    networks:
      - doh

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      - doh

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672" 
      - "15672:15672"
    expose:
      - "15672"
    networks:
      - doh
    
  celery_worker_1:
    container_name: celery_worker_1
    restart: always
    build:
      context: ./backend
      dockerfile: dockerfile
    volumes:
      - ./backend:/backend
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "celery -A backend worker --loglevel=info"
    depends_on:
      - rabbitmq
      - redis
      - backend
    networks:
      - doh

  celery_worker_2:
    container_name: celery_worker_2
    restart: always
    build:
      context: ./backend
      dockerfile: dockerfile
    volumes:
      - ./backend:/backend
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "celery -A backend worker --loglevel=info"
    depends_on:
      - rabbitmq
      - redis
      - backend
    networks:
      - doh


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    links:
      - cadvisor
      - alertmanager
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
    user: root
    depends_on:
      - cadvisor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - doh


  grafana:
    build:
      context: ./monitoring/grafana
    container_name: grafana
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    networks:
      - doh


  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9200:9100"
    restart: always
    networks:
      - doh

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - doh
      

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8090:8090"
    command:
      - '-port=8090'
    restart: always
    networks:
      - doh
      

volumes:
  mysql_data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  doh:
    driver: bridge